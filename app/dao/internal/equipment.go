// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// EquipmentDao is the manager for logic model data accessing and custom defined data operations functions management.
type EquipmentDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns EquipmentColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// EquipmentColumns defines and stores column names for table equipment.
type EquipmentColumns struct {
	Id    string //                   
    Name  string // equipment name    
    Type  string // equipment type    
    Atk   string // attack damage     
    Mag   string // magical damage    
    Def   string // physical defense  
    Res   string // magical defense   
    Spd   string // speed
}

//  equipmentColumns holds the columns for table equipment.
var equipmentColumns = EquipmentColumns{
	Id:   "id",    
            Name: "name",  
            Type: "type",  
            Atk:  "atk",   
            Mag:  "mag",   
            Def:  "def",   
            Res:  "res",   
            Spd:  "spd",
}

// NewEquipmentDao creates and returns a new DAO object for table data access.
func NewEquipmentDao() *EquipmentDao {
	return &EquipmentDao{
		Group:   "default",
		Table:   "equipment",
		Columns: equipmentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *EquipmentDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *EquipmentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *EquipmentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}